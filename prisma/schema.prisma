// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id             Int            @id @default(autoincrement())
  title          String
  content        String
  published      Boolean        @default(false)
  authtorId      Int
  author         User           @relation(fields: [authtorId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  postCategories PostCatagory[] // Add this line to create the opposite relation field

  @@map("posts")
}

model User {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  age     Int      @default(15)
  role    UserRole @default(user)
  profile Profile? //one to one relation profile
  posts   Post[] //one to many relation posts

  @@map("users")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id]) //one to one relation user

  @@map("profiles")
}

model Catagory {
  id             Int            @id @default(autoincrement())
  name           String
  postCategories PostCatagory[] // Add this line to create the opposite relation field

  @@map("catagories")
}

model PostCatagory {
  postId     Int
  post       Post     @relation(fields: [postId], references: [id])
  catagoryId Int
  catagory   Catagory @relation(fields: [catagoryId], references: [id])

  @@id([postId, catagoryId])
  @@map("postCatagories")
}

enum UserRole {
  user
  admin
}
